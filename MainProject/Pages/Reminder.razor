@using System.Text
@using Microsoft.AspNetCore.Http
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NotificationService notificationService
@using System.Drawing
@using System.IO
@using System.Text.Json

<div style="overflow-y: auto; max-height: 35rem;">
    <RadzenStack>
        <RadzenRow Style="width: 100%">
            <RadzenFormField Text="Food Name" Variant="Variant.Flat" Style="width: 85%">
                <RadzenTextBox @bind-Value="@foodName" />
            </RadzenFormField>
            <RadzenButton Icon="camera" Click="OpenNameCamera" Style="width: 10%"></RadzenButton>
        </RadzenRow>

        <RadzenRow Visible="@showNameCamera" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenStack>
                <video id="videoElement1" style="height:20rem" autoplay></video>
                <canvas id="canvasElement1" style="height:20rem; display:none;" hidden></canvas>
                <RadzenButton Click="CaptureNameImage" ButtonStyle="ButtonStyle.Secondary">Capture Product Name</RadzenButton>
            </RadzenStack>
        </RadzenRow>

        <RadzenRow>
            <RadzenFormField Text="Best Before" Variant="Variant.Flat" Style="width: 85%;">
                <RadzenDatePicker @bind-Value="@expireDate" />
            </RadzenFormField>
            <RadzenButton Icon="camera" Click="OpenDateCamera" Style="width: 10%"></RadzenButton>
       </RadzenRow>

        <RadzenRow Visible="@showDateCamera" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenStack Style="width:70%">
                <video id="videoElement2" style="height:20rem" autoplay></video>
                <canvas id="canvasElement2" style="height:20rem; display:none;" hidden></canvas>
                <RadzenButton Click="CaptureDateImage" ButtonStyle="ButtonStyle.Secondary">Capture BEST BEFORE</RadzenButton>
            </RadzenStack>
        </RadzenRow>

        <RadzenFormField Text="Calender Event Color" Variant="Variant.Flat" Style="width: 85%">
            <RadzenColorPicker @bind-Value="@color" />
        </RadzenFormField>

    

        <RadzenButton Click="GenerateICS" Style="width: 100%">Add to your calender</RadzenButton>
    </RadzenStack>
</div>



@code{
    bool isLoading = false;
    string foodName;
    DateTime expireDate;
    string color = "rgb(68, 58, 110)";
    bool showNameCamera = false;
    bool showDateCamera = false;

    bool shouldInitializeNameCamera = false;
    bool shouldInitializeDateCamera = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldInitializeNameCamera)
        {
            var nameCameraAvailable = await JSRuntime.InvokeAsync<bool>("initializeCamera", "videoElement1");

            shouldInitializeNameCamera = false;
        }

        if (shouldInitializeDateCamera)
        {
            var dateCameraAvailable = await JSRuntime.InvokeAsync<bool>("initializeCamera", "videoElement2");

            shouldInitializeDateCamera = false;
        }
    }

    private void OpenNameCamera()
    {
        showDateCamera = false;
        showNameCamera = true;
        shouldInitializeNameCamera = true;
        StateHasChanged();
    }


    private async Task CaptureNameImage()
    {
        isLoading = true;
        var apiKey = "AIzaSyAMLTuq5eTM1B_Q2BhMnc4qa6GzgDrnmuw";
        var analysisResult = await JSRuntime.InvokeAsync<string>("captureAndAnalyzeFrame", "videoElement1", "canvasElement1", apiKey);

        if (!string.IsNullOrEmpty(analysisResult))
        {
            foodName = analysisResult;
            StateHasChanged();
        }
        else
        {
            notificationService.Notify(NotificationSeverity.Info, "Failed to capture or analyze image", "Error");
        }

        isLoading = false;
        showNameCamera = false;
        StateHasChanged();
    }


    private async Task OpenDateCamera()
    {
        showNameCamera = false;
        showDateCamera = true;
        shouldInitializeDateCamera = true;
        StateHasChanged();
    }

    private async Task CaptureDateImage()
    {
        isLoading = true;

        //something

        isLoading = false;
        showDateCamera = false;
        StateHasChanged();
    }
}