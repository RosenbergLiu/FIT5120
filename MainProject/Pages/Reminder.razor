@using System.Text
@using Microsoft.AspNetCore.Http
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NotificationService notificationService
@inject IConfiguration configuration

<div style="overflow-y: auto; max-height: 35rem;">
    <RadzenTemplateForm Data="@reminder" Submit="@((ReminderViewModel args) => { GenerateICS(args).Wait(); })">
        <RadzenStack>
            <RadzenRow Style="width: 100%;">
                <RadzenColumn Size="10">
                    <RadzenFormField Text="Food Name" Variant="Variant.Flat" Style="width: 100%">
                        <RadzenTextBox @bind-Value="@reminder.FoodName" Name="FoodName" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="2">
                    <RadzenButton Icon="camera" Click="OpenNameCamera" Style="width: 100%; height: 100%" ButtonStyle="ButtonStyle.Success"></RadzenButton>
                </RadzenColumn>
                
            </RadzenRow>
            <RadzenRequiredValidator Component="FoodName" Text="Product name is required" Popup="false" />

            <RadzenRow Visible="@showNameCamera" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                <RadzenStack Style="width:70%">
                    <video id="videoElement1" style="height:20rem" autoplay></video>
                    <canvas id="canvasElement1" style="height:20rem; display:none;" hidden></canvas>
                    <RadzenButton Click="CaptureNameImage" ButtonStyle="ButtonStyle.Secondary">Capture Product Name</RadzenButton>
                </RadzenStack>
            </RadzenRow>

            <RadzenRow>
                <RadzenColumn Size="10">
                    <RadzenFormField Text="Best Before" Variant="Variant.Flat" Style="width: 100%;">
                        <RadzenDatePicker @bind-Value="@reminder.ExpireDate" Name="ExpireDate">
                            <FooterTemplate>
                                <RadzenButton Click=@(args => reminder.ExpireDate = DateTime.Now) Text="Today" ButtonStyle="ButtonStyle.Secondary" class="my-3 w-100" />
                            </FooterTemplate>
                        </RadzenDatePicker>
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="2">
                    <RadzenButton Icon="camera" Click="OpenDateCamera" Style="width: 100%; height: 100%" ButtonStyle="ButtonStyle.Success"></RadzenButton>
                </RadzenColumn>
                
            </RadzenRow>
            <RadzenRequiredValidator Component="ExpireDate" Text="Expire date is required" Popup="false" />

            <RadzenRow Visible="@showDateCamera" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                <RadzenStack Style="width:70%">
                    <video id="videoElement2" style="height:20rem" autoplay></video>
                    <canvas id="canvasElement2" style="height:20rem; display:none;" hidden></canvas>
                    <RadzenButton Click="CaptureDateImage" ButtonStyle="ButtonStyle.Secondary">Capture BEST BEFORE</RadzenButton>
                </RadzenStack>
            </RadzenRow>

            <RadzenButton ButtonType="ButtonType.Submit" Style="width: 100%" Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Success">Add to your calender</RadzenButton>
        </RadzenStack>
    </RadzenTemplateForm>
    <a id="downloadLink" href="" download="" style="display: none;"></a>

</div>



@code{
    bool isLoading = false;
    ReminderViewModel reminder = new ReminderViewModel();
    DateTime expireDate;
    bool showNameCamera = false;
    bool showDateCamera = false;

    bool shouldInitializeNameCamera = false;
    bool shouldInitializeDateCamera = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldInitializeNameCamera)
        {
            var nameCameraAvailable = await JSRuntime.InvokeAsync<bool>("initializeCamera", "videoElement1");

            shouldInitializeNameCamera = false;
        }

        if (shouldInitializeDateCamera)
        {
            var dateCameraAvailable = await JSRuntime.InvokeAsync<bool>("initializeCamera", "videoElement2");

            shouldInitializeDateCamera = false;
        }

        if (shouldDownload)
        {
            await JSRuntime.InvokeVoidAsync("triggerDownload", downloadDataUrl, downloadFileName);

            shouldDownload = false;
        }
    }

    private void OpenNameCamera()
    {
        showDateCamera = false;
        showNameCamera = true;
        shouldInitializeNameCamera = true;
        StateHasChanged();
    }


    private async Task CaptureNameImage()
    {
        isLoading = true;
        var apiKey = configuration["GoogleVisionAPI"] ?? "";
        var analysisResult = await JSRuntime.InvokeAsync<string>("captureAndAnalyzeFrame", "videoElement1", "canvasElement1", apiKey);

        if (!string.IsNullOrEmpty(analysisResult))
        {
            reminder.FoodName = analysisResult;
            StateHasChanged();
        }
        else
        {
            notificationService.Notify(NotificationSeverity.Error, "Failed to capture or analyze image");
        }

        isLoading = false;
        showNameCamera = false;
        StateHasChanged();
    }


    private void OpenDateCamera()
    {
        showNameCamera = false;
        showDateCamera = true;
        shouldInitializeDateCamera = true;
        StateHasChanged();
    }

    private async Task CaptureDateImage()
    {
        isLoading = true;

        var apiKey = configuration["GoogleVisionAPI"] ?? "";
        var analysisResult = await JSRuntime.InvokeAsync<string>("captureAndAnalyzeFrame", "videoElement2", "canvasElement2", apiKey);

        notificationService.Notify(NotificationSeverity.Error, "Failed to capture or analyze image");

        isLoading = false;
        showDateCamera = false;
        StateHasChanged();
    }

}