@using System.Text
@using Microsoft.AspNetCore.Http
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NotificationService notificationService

<RadzenStack>
    <RadzenRow Style="width: 100%">
        <RadzenFormField Text="Food Name" Variant="Variant.Flat" Style="width: 85%">
            <RadzenTextBox @bind-Value="@foodName" />
        </RadzenFormField>
        <RadzenButton Icon="camera" Click="OpenNameCamera" Style="width: 10%"></RadzenButton>
    </RadzenRow>

    <RadzenRow Visible="@showNameCamera">
        <RadzenText Text="Capturing product name"></RadzenText>
        <RadzenStack>
            <video id="videoElement1" width="640" height="480" autoplay></video>
            <canvas id="canvasElement1" width="640" height="480"></canvas>
            <RadzenButton Click="CaptureNameImage" ButtonStyle="ButtonStyle.Secondary">Capture Image</RadzenButton>
        </RadzenStack>
    </RadzenRow>

    <RadzenRow>
        <RadzenFormField Text="Best Before" Variant="Variant.Flat" Style="width: 85%;">
            <RadzenDatePicker @bind-Value="@expireDate" />
        </RadzenFormField>
        <RadzenButton Icon="camera" Click="OpenDateCamera" Style="width: 10%"></RadzenButton>
   </RadzenRow>

    <RadzenRow Visible="@showDateCamera">
        <RadzenText Text="Capturing BEST BEFORE"></RadzenText>
        <RadzenStack>
            <video id="videoElement2" width="640" height="480" autoplay></video>
            <canvas id="canvasElement2" width="640" height="480"></canvas>
            <RadzenButton Click="CaptureDateImage" ButtonStyle="ButtonStyle.Secondary">Capture Image</RadzenButton>
        </RadzenStack>
    </RadzenRow>

    <RadzenFormField Text="Calender Event Color" Variant="Variant.Flat" Style="width: 85%">
        <RadzenColorPicker @bind-Value="@color" />
    </RadzenFormField>

    

    <RadzenButton Click="GenerateICS" Style="width: 100%">Add to your calender</RadzenButton>
</RadzenStack>




@code{
    string foodName;
    DateTime expireDate;
    string color = "rgb(68, 58, 110)";
    bool showNameCamera = false;
    bool showDateCamera = false;

    private string nameImageDataUrl;
    private string dateImageDataUrl;

    private async Task OpenNameCamera()
    {
        showDateCamera = false;
        bool nameCameraAvailable = await JSRuntime.InvokeAsync<bool>("initializeCamera", "videoElement1");
        if (nameCameraAvailable)
        {
            showNameCamera = true;
        }
    }

    private async Task CaptureNameImage()
    {
        nameImageDataUrl = await JSRuntime.InvokeAsync<string>("captureImage", "videoElement1", "canvasElement1");
        showNameCamera = true;
    }

    private async Task OpenDateCamera()
    {
        showNameCamera = false;
        bool dateCameraAvailable = await JSRuntime.InvokeAsync<bool>("initializeCamera", "videoElement2");
        if (dateCameraAvailable)
        {
            showDateCamera = true;
        }
    }

    private async Task CaptureDateImage()
    {
        dateImageDataUrl = await JSRuntime.InvokeAsync<string>("captureImage", "videoElement2", "canvasElement2");
        showDateCamera = false;
    }
}